/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package studentgame;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;

import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeAll;

class StudentGameTest {
    @Test
    public void testCreateStudent() {
        Student student = new Student();
        assertNotNull(student);
    }

    @Test
    public void testStudentDefaultValues() {
        Student student = new Student();
        assertEquals(Student.DEFAULT_KNOWLEDGE_LEVEL, student.getKnowledgeLevel());
        assertEquals(Student.DEFAULT_EXPERIENCE_LEVEL, student.getExperienceLevel());
        assertEquals(Student.DEFAULT_ENERGY_LEVEL, student.getEnergyLevel());
        assertFalse(student.hasJob());
    }

    @Test
    public void testStudy() {
        Student student = new Student();
        student.study();
        assertEquals(Student.DEFAULT_KNOWLEDGE_LEVEL + Student.STUDY_GAIN,
                student.getKnowledgeLevel());
    }

    @Test
    void testStudyDecreasesEnergy() {
        Student student = new Student();
        student.study();
        assertEquals(Student.DEFAULT_ENERGY_LEVEL - Student.STUDY_COST,
                student.getEnergyLevel());
    }

    @Test
    public void testPractice() {
        Student student = new Student();
        student.practice();
        assertEquals(Student.DEFAULT_KNOWLEDGE_LEVEL + Student.PRACTICE_GAIN,
                student.getExperienceLevel());
    }

    @Test
    void testPracticeDecreasesEnergy() {
        Student student = new Student();
        student.practice();
        assertEquals(Student.DEFAULT_ENERGY_LEVEL - Student.PRACTICE_COST,
                student.getEnergyLevel());
    }

    @Test
    public void testRest() {
        Student student = new Student();
        student.rest();
        assertEquals(Student.DEFAULT_ENERGY_LEVEL + Student.REST_GAIN,
                student.getEnergyLevel());
    }

    // @Test
    // public void testCannotStudyWhenEnergyIsZero() {
    // Student student = new Student();
    // for (int i = ; i < Student.DEFAULT_ENERGY_LEVE; i++) {
    // student.study();
    // }
    // student.study();
    // assertEquals(Student.DEFAULT_ENERGY_LEVE, student.getKnowledgeLevel());
    // assertEquals(0, student.getEnergyLevel());
    // }

    @Test
    public void testMustHaveEnoughEnergyToStudy() {
        Student student = new Student();

        int counter = 0;
        while (student.getEnergyLevel() >= Student.STUDY_COST) {
            student.study();
            counter++;
        }

        int knowledgeLevel = counter * Student.STUDY_GAIN + Student.DEFAULT_KNOWLEDGE_LEVEL;

        student.study();

        assertEquals(knowledgeLevel, student.getKnowledgeLevel());
        assertTrue(student.getEnergyLevel() >= 0);
    }

    @Test
    public void testMustHaveEnoughEnergyToPractice() {
        Student student = new Student();

        int counter = 0;
        while (student.getEnergyLevel() >= Student.PRACTICE_COST) {
            student.practice();
            counter++;
        }

        int experienceLevel = counter * Student.PRACTICE_GAIN + Student.DEFAULT_EXPERIENCE_LEVEL;

        student.practice();

        assertEquals(experienceLevel, student.getExperienceLevel());
        assertTrue(student.getEnergyLevel() >= 0);
    }

    @Test
    public void testApplyForJob() {
        Student student = new Student();
        for (int i = 0; i < 5; i++) {
            student.practice();
        }

        for (int i = 0; i < 5; i++) {
            student.rest();
        }

        for (int i = 0; i < 5; i++) {
            student.study();
        }

        student.applyForJob();
        assertTrue(student.hasJob());

    }

}
